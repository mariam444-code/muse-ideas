/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Group } from "three";

type GLTFResult = GLTF & {
  nodes: {
    goose: THREE.SkinnedMesh;
    goose_1: THREE.SkinnedMesh;
    goose_2: THREE.SkinnedMesh;
    Bone: THREE.Bone;
    Bone005: THREE.Bone;
    Bone008: THREE.Bone;
  };
  materials: {
    eyes: THREE.MeshStandardMaterial;
    ["beak-feet"]: THREE.MeshStandardMaterial;
    body: THREE.MeshStandardMaterial;
  };
};

type ActionName = "walk";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Goose-1660189072/goose_00.glb.gz";

type GooseModelProps = {
  walking?: boolean;
};

export default function Model(props: GooseModelProps) {
  const { walking = false } = props;

  const group = useRef<Group>(null);
  const { nodes, materials, animations } = useGLTF(FILE_URL) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  console.log("walking", walking);

  useEffect(() => {
    if (!actions.walk) return;
    actions.walk.setEffectiveTimeScale(2);
    if (walking) {
      actions.walk.play();
    } else {
      actions.walk.stop();
    }
  }, [walking]);

  return (
    <group ref={group} dispose={null}>
      <group name="Scene" scale={0.14}>
        <group name="Armature" position={[0, 0.99, 0]}>
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Bone005} />
          <primitive object={nodes.Bone008} />
          <group name="Goose">
            <skinnedMesh
              name="goose"
              geometry={nodes.goose.geometry}
              material={materials.eyes}
              skeleton={nodes.goose.skeleton}
            />
            <skinnedMesh
              name="goose_1"
              geometry={nodes.goose_1.geometry}
              material={materials["beak-feet"]}
              skeleton={nodes.goose_1.skeleton}
            />
            <skinnedMesh
              name="goose_2"
              geometry={nodes.goose_2.geometry}
              material={materials.body}
              skeleton={nodes.goose_2.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}
